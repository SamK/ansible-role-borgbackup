---

- name: Create borg config & temporary data directories
  file:
    path: "{{ borgbackup_home }}/{{ item }}"
    state: directory
    owner: "{{ borgbackup_user }}"
    group: "{{ borgbackup_user }}"
    mode: 0700
  loop:
    - config
    - data

- name: Upload initial backup patterns
  blockinfile:
    path: "{{ borgbackup_home }}/config/patterns"
    marker: "# {mark} ANSIBLE MANAGED BLOCK"
    create: yes
    block: "R {{ borgbackup_home }}/data"
    owner: "{{ borgbackup_user }}"
    group: "{{ borgbackup_user }}"
    mode: 0600

- name: Upload environment file for repository & passphrase
  copy:
    content: |
      BORG_REPO={{ borgbackup_config.repository }}
      BORG_PASSPHRASE={{ borgbackup_config.passphrase }}
    dest: "{{ borgbackup_home }}/config/environment"
    owner: "{{ borgbackup_user }}"
    group: "{{ borgbackup_user }}"
    mode: 0600
  no_log: yes

- name: Install borg service files
  template:
    src: "{{ item }}.j2"
    dest: /etc/systemd/system/{{ item }}
  loop:
    - borgbackup.service
    - borgbackup.timer
  notify: Reload systemd

- name: Enable systemd timer service
  systemd:
    name: borgbackup.timer
    enabled: yes
    state: started

- name: Configure and possibly prepare repository
  become: yes
  become_user: "{{ borgbackup_user }}"
  block:

    - name: Configure known_hosts from config
      known_hosts:
        name: "{{ item.split()[0] }}"
        key: "{{ item }}"
        state: present
      loop: "{{ borgbackup_config.known_hosts }}"
      loop_control:
        label: "{{ ' '.join(item.split()[:2]) }} ..."
      when: borgbackup_config.known_hosts is defined

    - name: Regather facts to get SSH host keys
      setup:
        gather_subset: "!all"
      delegate_to: "{{ borgbackup_config.repository_server }}"
      delegate_facts: True
      when: borgbackup_config.repository_server is defined

    - name: Configure known_hosts from inventory server
      known_hosts:
        name: "{{ borgbackup_config.repository_server }}"
        key: "{{ borgbackup_config.repository_server }} {{ item.ssh_algo }} {{ hostvars[borgbackup_config.repository_server]['ansible_facts'][item.fact] }}"
        state: present
      loop:
        - {fact: ssh_host_key_ecdsa_public, ssh_algo: ecdsa-sha2-nistp256}
        - {fact: ssh_host_key_ed25519_public, ssh_algo: ssh-ed25519}
        - {fact: ssh_host_key_rsa_public, ssh_algo: ssh-rsa}
      loop_control:
        label: "{{ borgbackup_config.repository_server }} {{ item.ssh_algo }} ..."
      when: borgbackup_config.repository_server is defined

    - name: Check if we already created a repository
      command: "{{ borgbackup_path }} list {{ borgbackup_config.repository }}"
      environment:
        BORG_PASSPHRASE: "{{ borgbackup_config.passphrase }}"
      ignore_errors: yes
      changed_when: false
      when: borgbackup_config.autoinit|default(True)
      register: borg_repo_check
      no_log: yes

    - name: Init backup repository
      command: "{{ borgbackup_path }} init -e repokey-blake2 {{ borgbackup_config.repository }}"
      environment:
        BORG_PASSPHRASE: "{{ borgbackup_config.passphrase }}"
      when: borgbackup_config.autoinit|default(True) and borg_repo_check.rc == 2
      no_log: yes
